按鈕越來越多，也可以使用 data-target 屬性來搭配事件代理，例如：
HTML:

<button data-target="carousel">顯示輪播</button>

JS:

document.addEventListener('click', function (e) {
  if (e.target.dataset.target) {
    showElementById(e.target.dataset.target);
    if (e.target.dataset.target === "carousel") {
      showElementById("dots");
    }
  }
});


 Alpine.js 最佳化版本重構
 
🔧 1. 先建立狀態（用 x-data 控制）

在 .content 容器中加入 Alpine.js 狀態管理：

<section class="content" x-data="{ 
  show: '', 
  scrollToTop() { window.scrollTo({ top: 0, behavior: 'smooth' }) }, 
  drawRandom() {
    const canvas = this.$refs.canvas;
    const ctx = canvas.getContext('2d');
    canvas.width = 300;
    canvas.height = 150;
    const randomValue = Math.floor(Math.random() * 100) + 1;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.font = '48px Arial';
    ctx.fillStyle = '#333';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(randomValue, canvas.width / 2, canvas.height / 2);
  }
}">

✨ 2. 修改按鈕觸發方式

將 onclick="showCarousel()" 等改為：

<button @click="show = 'carousel'">顯示輪播</button>
<button @click="show = 'selectcontent'">顯示下拉選單</button>
<button @click="show = 'jumptop'">顯示返回頂部按鈕</button>
<button @click="show = 'animaleffect'">顯示動畫效果</button>
<button @click="show = 'formdatacontent'">顯示表單</button>
<button @click="show = 'randomway'">顯示隨機號碼</button>

🧩 3. 顯示區塊的改寫（使用 x-show）

<div class="carousel mx-auto" x-show="show === 'carousel'">
  <!-- ... -->
</div>

<div class="dots" x-show="show === 'carousel'"></div>

<div class="selectcontent mx-auto" x-show="show === 'selectcontent'">
  <!-- ... -->
</div>

<div class="animaleffect mx-auto animate__animated text-center p-4 border rounded shadow"
     x-show="show === 'animaleffect'">
  <!-- ... -->
</div>

<div class="formdatacontent mx-auto" x-show="show === 'formdatacontent'">
  <form @submit.prevent="
    try {
      const regex = new RegExp($refs.regex.value);
      if (regex.test($refs.input.value)) {
        alert('✅ 驗證成功！');
      } else {
        alert('❌ 驗證失敗');
      }
    } catch (err) {
      alert('⚠️ 無效的正則表達式：' + err.message);
    }
  ">
    <h4 class="mb-4 text-center">輸入的測試資料</h4>
    <div class="mb-3">
      <label class="form-label">要驗證的值</label>
      <input x-ref="input" type="text" class="form-control" placeholder="測試值">
    </div>
    <div class="mb-3">
      <label class="form-label">regex value</label>
      <input x-ref="regex" type="text" class="form-control" placeholder="正則表達式">
    </div>
    <button type="submit" class="btn btn-primary w-100">送出</button>
  </form>
</div>

<div class="jumptop mx-auto position-fixed bottom-0 end-0 mb-4 me-4 animate__animated"
     x-show="show === 'jumptop'">
  <button class="btn btn-secondary shadow rounded-circle p-3" @click="scrollToTop()" title="回到頂端">⬆️</button>
</div>

<div class="randomway mx-auto" x-show="show === 'randomway'">
  <canvas x-ref="canvas" class="border rounded shadow-sm w-100"></canvas>
  <button class="btn btn-secondary shadow rounded-circle p-3" @click="drawRandom()">開始選擇亂數即顯示圖片</button>
</div>

🎯 好處總結

你原來的方式								改用 Alpine.js 的好處

多個獨立 showCarouselX() 函數				只需一個 show 狀態變數
每次都操作 DOM 顯示/隱藏					使用 x-show 自動處理，乾淨直觀
表單驗證寫在外部 JS 中						表單驗證內嵌在 @submit.prevent 中
隨機畫布單獨綁定 function					可用 x-ref + 內建函數整合