[
  {
    "date": "2025-06-21",
    "title": "Two Sum Problem",
    "languages": [
      "en",
      "zh"
    ],
    "description": {
      "en": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
      "zh": "\u7D66\u5B9A\u4E00\u500B\u6574\u6578\u9663\u5217 nums \u548C\u4E00\u500B\u6574\u6578 target\uFF0C\u50B3\u56DE\u9019\u5169\u500B\u6578\u5B57\u7684\u7D22\u5F15\uFF0C\u4F7F\u5B83\u5011\u7E3D\u548C\u7B49\u65BC target\u3002\u53EF\u4EE5\u5047\u8A2D\u6BCF\u500B\u8F38\u5165\u53EA\u6709\u4E00\u500B\u89E3\uFF0C\u4E0D\u80FD\u91CD\u8907\u4F7F\u7528\u540C\u4E00\u500B\u5143\u7D20\u3002\u53EF\u4EE5\u6309\u4EFB\u610F\u9806\u5E8F\u8FD4\u56DE\u7B54\u6848\u3002"
    },
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation_en": "Because nums[0] \u002B nums[1] == 9, we return [0, 1].",
        "explanation_zh": "\u56E0\u70BA nums[0] \u002B nums[1] == 9, \u6211\u5011\u8FD4\u56DE [0, 1]\u3002"
      },
      {
        "input": "nums = [3,2,4], target = 6",
        "output": "[1,2]"
      },
      {
        "input": "nums = [3,3], target = 6",
        "output": "[0,1]"
      }
    ],
    "constraints": [
      "2 \u003C= nums.length \u003C= 10^4",
      "-10^9 \u003C= nums[i] \u003C= 10^9",
      "-10^9 \u003C= target \u003C= 10^9",
      "Only one valid answer exists."
    ],
    "followUp": {
      "en": "Can you come up with an algorithm that is less than O(n\u00B2) time complexity?",
      "zh": "\u4F60\u80FD\u60F3\u51FA\u4E00\u500B\u6642\u9593\u8907\u96DC\u5EA6\u5C0F\u65BC O(n\u00B2) \u7684\u6F14\u7B97\u6CD5\u55CE\uFF1F"
    },
    "solutions": [
      {
        "type": "Brute Force",
        "language": "Java",
        "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for(int i = 0; i \u003C nums.length; i\u002B\u002B) {\n            int diff = target - nums[i];\n            for(int j = 0; j \u003C nums.length; j\u002B\u002B) {\n                if(nums[j] == diff \u0026\u0026 j != i) {\n                    return new int[]{i, j};\n                }\n            }\n        }\n        return null;\n    }\n}",
        "steps": [
          "\u6309\u9020\u9806\u5E8F\u9078\u64C7\u9663\u5217\u6578\u503C\u8207 target \u76F8\u6E1B\u7372\u53D6\u53E6\u4E00\u500B\u503C diff",
          "\u6309\u9020\u9806\u5E8F\u627E\u51FA\u53E6\u4E00\u500B\u503C diff",
          "\u627E\u51FA\u5F8C\u56DE\u50B3\u4E00\u500B\u65B0\u9663\u5217 [i,j]"
        ],
        "timeComplexity": "O(n\u00B2)",
        "spaceComplexity": "O(1)"
      },
      {
        "type": "Optimized",
        "language": "Java",
        "code": "import java.util.HashMap;\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        HashMap\u003CInteger, Integer\u003E map = new HashMap\u003C\u003E();\n        for (int i = 0; i \u003C nums.length; i\u002B\u002B) {\n            int diff = target - nums[i];\n            if (map.containsKey(diff)) {\n                return new int[]{map.get(diff), i};\n            }\n            map.put(nums[i], i);\n        }\n        return null;\n    }\n}",
        "explanation": "\u901A\u904E HashMap \u8A18\u9304\u5DF2\u904D\u6B77\u7684\u5143\u7D20\uFF0C\u4F7F\u67E5\u627E\u5DEE\u503C\u8B8A\u70BA O(1)",
        "timeComplexity": "O(n)",
        "spaceComplexity": "O(n)"
      }
    ]
  },
  {
    "date": "2025-06-23",
    "title": "Add Two Numbers",
    "languages": [
      "en",
      "zh"
    ],
    "description": {
      "en": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.",
      "zh": "\u4F60\u6703\u5F97\u5230\u5169\u500B\u975E\u7A7A\u7684\u93C8\u7D50\u4E32\u5217\uFF0C\u4EE3\u8868\u5169\u500B\u975E\u8CA0\u6574\u6578\u3002\u4F4D\u6578\u662F\u4EE5\u53CD\u5411\u9806\u5E8F\u5132\u5B58\u7684\uFF0C\u6BCF\u500B\u7BC0\u9EDE\u53EA\u5305\u542B\u4E00\u500B\u6578\u5B57\u3002\u8ACB\u5C07\u9019\u5169\u500B\u6578\u5B57\u76F8\u52A0\uFF0C\u4E26\u4EE5\u93C8\u7D50\u4E32\u5217\u7684\u5F62\u5F0F\u8FD4\u56DE\u7D50\u679C\u3002\u53EF\u4EE5\u5047\u8A2D\u8F38\u5165\u7684\u6578\u5B57\u6C92\u6709\u524D\u5C0E\u96F6\uFF0C\u9664\u4E86\u6578\u5B57 0 \u672C\u8EAB\u3002"
    },
    "examples": [
      {
        "input": "l1 = [2,4,3], l2 = [5,6,4]",
        "output": "[7,0,8]",
        "explanation_en": "342 \u002B 465 = 807.",
        "explanation_zh": "342 \u002B 465 = 807\u3002"
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]",
        "explanation_en": "0 \u002B 0 = 0",
        "explanation_zh": "0 \u002B 0 = 0"
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
        "output": "[8,9,9,9,0,0,0,1]",
        "explanation_en": "9999999 \u002B 9999 = 10009998",
        "explanation_zh": "9999999 \u002B 9999 = 10009998"
      }
    ],
    "constraints": [
      "The number of nodes in each linked list is in the range [1, 100]",
      "0 \u003C= Node.val \u003C= 9",
      "The input lists represent a number without leading zeros"
    ],
    "solutions": [
      {
        "type": "Optimized",
        "language": "C#",
        "code": "public class ListNode {\n    public int val;\n    public ListNode next;\n    public ListNode(int val = 0, ListNode next = null) {\n        this.val = val;\n        this.next = next;\n    }\n}\n\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode current = dummyHead;\n        int carry = 0;\n\n        while (l1 != null || l2 != null) {\n            int x = (l1 != null) ? l1.val : 0;\n            int y = (l2 != null) ? l2.val : 0;\n            int sum = x \u002B y \u002B carry;\n\n            carry = sum / 10;\n            current.next = new ListNode(sum % 10);\n            current = current.next;\n\n            if (l1 != null) l1 = l1.next;\n            if (l2 != null) l2 = l2.next;\n        }\n\n        if (carry \u003E 0) {\n            current.next = new ListNode(carry);\n        }\n\n        return dummyHead.next;\n    }\n}",
        "explanation": "Iteratively add digits of both lists with carry handling. Use a dummy head to simplify list construction.",
        "timeComplexity": "O(max(n, m))",
        "spaceComplexity": "O(max(n, m))"
      }
    ]
  }
]


using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Text.Json.Serialization;

public class Problem
{
    public string date { get; set; }
    public string title { get; set; }
    public List<string> languages { get; set; }
    public Dictionary<string, string> description { get; set; }
    public List<Example> examples { get; set; }
    public List<string> constraints { get; set; }
    public Dictionary<string, string> followUp { get; set; }
    public List<Solution> solutions { get; set; }
}

public class Example
{
    public string input { get; set; }
    public string output { get; set; }
    public string explanation_en { get; set; }
    public string explanation_zh { get; set; }
}

public class Solution
{
    public string type { get; set; }
    public string language { get; set; }
    public string code { get; set; }
    public List<string> steps { get; set; }
    public string explanation { get; set; }
    public string timeComplexity { get; set; }
    public string spaceComplexity { get; set; }
}

class Program
{
    static void Main()
    {
        string file1 = "leetocdequestion.json";
        string file2 = "wantaddata.json";
        string outputFile = "problems.json";

        List<Problem> combinedProblems = new List<Problem>();

        // 讀取第一個 JSON
        if (File.Exists(file1))
        {
            string json1 = File.ReadAllText(file1);
            if (json1.TrimStart().StartsWith("["))
            {
                combinedProblems.AddRange(JsonSerializer.Deserialize<List<Problem>>(json1));
            }
            else
            {
                var problem1 = JsonSerializer.Deserialize<Problem>(json1);
                combinedProblems.Add(problem1);
            }
        }

        // 讀取第二個 JSON
        if (File.Exists(file2))
        {
            string json2 = File.ReadAllText(file2);
            if (json2.TrimStart().StartsWith("["))
            {
                combinedProblems.AddRange(JsonSerializer.Deserialize<List<Problem>>(json2));
            }
            else
            {
                var problem2 = JsonSerializer.Deserialize<Problem>(json2);
                combinedProblems.Add(problem2);
            }
        }

        // 寫入合併後的 JSON 陣列
        var options = new JsonSerializerOptions
        {
            WriteIndented = true,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        };

        string outputJson = JsonSerializer.Serialize(combinedProblems, options);
        File.WriteAllText(outputFile, outputJson);

        Console.WriteLine("已成功合併並儲存為 problems.json");
    }
}
