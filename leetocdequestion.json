{
  "date": "2025-06-21",
  "title": "Two Sum Problem",
  "languages": ["en", "zh"],
  "description": {
    "en": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "zh": "給定一個整數陣列 nums 和一個整數 target，傳回這兩個數字的索引，使它們總和等於 target。可以假設每個輸入只有一個解，不能重複使用同一個元素。可以按任意順序返回答案。"
  },
  "examples": [
    {
      "input": "nums = [2,7,11,15], target = 9",
      "output": "[0,1]",
      "explanation_en": "Because nums[0] + nums[1] == 9, we return [0, 1].",
      "explanation_zh": "因為 nums[0] + nums[1] == 9, 我們返回 [0, 1]。"
    },
    {
      "input": "nums = [3,2,4], target = 6",
      "output": "[1,2]"
    },
    {
      "input": "nums = [3,3], target = 6",
      "output": "[0,1]"
    }
  ],
  "constraints": [
    "2 <= nums.length <= 10^4",
    "-10^9 <= nums[i] <= 10^9",
    "-10^9 <= target <= 10^9",
    "Only one valid answer exists."
  ],
  "followUp": {
    "en": "Can you come up with an algorithm that is less than O(n²) time complexity?",
    "zh": "你能想出一個時間複雜度小於 O(n²) 的演算法嗎？"
  },
  "solutions": [
    {
      "type": "Brute Force",
      "language": "Java",
      "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for(int i = 0; i < nums.length; i++) {\n            int diff = target - nums[i];\n            for(int j = 0; j < nums.length; j++) {\n                if(nums[j] == diff && j != i) {\n                    return new int[]{i, j};\n                }\n            }\n        }\n        return null;\n    }\n}",
      "steps": [
        "按造順序選擇陣列數值與 target 相減獲取另一個值 diff",
        "按造順序找出另一個值 diff",
        "找出後回傳一個新陣列 [i,j]"
      ],
      "timeComplexity": "O(n²)",
      "spaceComplexity": "O(1)"
    },
    {
      "type": "Optimized",
      "language": "Java",
      "code": "import java.util.HashMap;\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int diff = target - nums[i];\n            if (map.containsKey(diff)) {\n                return new int[]{map.get(diff), i};\n            }\n            map.put(nums[i], i);\n        }\n        return null;\n    }\n}",
      "explanation": "通過 HashMap 記錄已遍歷的元素，使查找差值變為 O(1)",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)"
    }
  ]
}
